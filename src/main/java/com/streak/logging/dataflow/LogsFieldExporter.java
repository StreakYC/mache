package com.streak.logging.dataflow;

import java.util.List;

import com.google.api.services.bigquery.model.TableFieldSchema;
import org.json.JSONObject;

/**
 * A BigqueryFieldExporter converts a RequestLogs entry into a set of fields.
 *
 * Initially {@link #getFieldCount() getFieldCount}, 
 * {@link #getFieldName(int) getFieldName}, 
 * and {@link #getFieldType(int)}
 * are used to create the schema.
 * Then, for each log entry, {@link #processLog(JSONObject) processLog} is
 * called, followed by a {@link #getField(String) getField) call for each field.
 */
public interface LogsFieldExporter {

    /**
     * Called for each RequestLogs to be processed. Should store necessary state
     * to respond to later {@link #getField(String) getField} calls.
     *
     * @param log entry to be processed
     */
    public void processLog(JSONObject log);

    /**
     * Return the value of the given field for the last processed log.
     * Any Object with a toString method that generates a BigQuery readable
     * string is allowed.
     *
     * The String is interned so that the reference can be compared directly.
     *
     * @param name an intern'ed string returned from {@link #getFieldName(int) getFieldName}
     * @return the field's value or null if the name is invalid
     */
    public Object getField(String name);

    /**
     * @return the number of fields generated by this exporter
     */
    public int getFieldCount();

    /**
     * Indexing must be consistent with {@link #getFieldType(int) getFieldType}.
     *
     * @param i the field index
     * @return the name of the i'th field
     */
    public String getFieldName(int i);

    /**
     * Indexing must be consistent with {@link #getFieldName(int) getFieldName}.
     *
     * @param i the field index
     * @return the BigQuery data type of the i'th field
     */
    public String getFieldType(int i);

    /**
     * Indexing must be consistent with {@link #getFieldName(int) getFieldName}.
     *
     * Guaranteed to be called with value i only if getFieldType(i) returns 'record'
     *
     * @param i the field index
     * @return the BigQuery data subfields of the i'th field
     */
    public List<TableFieldSchema> getFieldFields(int i);

    /**
     * Indexing must be consistent with {@link #getFieldName(int) getFieldName}.
     *
     * @param i the field index
     * @return the BigQuery data type of the i'th field
     */
    public boolean getFieldNullable(int fieldIndex);

    /**
     * Indexing must be consistent with {@link #getFieldName(int) getFieldName}.
     *
     * @param i the field index
     * @return the BigQuery data type of the i'th field
     */
    public boolean getFieldRepeated(int fieldIndex);

    public String getFieldMode(int fieldIndex);
}
